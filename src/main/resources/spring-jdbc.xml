<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd">

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="url" value="${jdbcUrl_master}" />
		<property name="username" value="${username_master}" />
		<property name="password" value="${password_master}" />


		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${maxPoolPreparedStatementPerConnectionSize}" />

		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall -->
		<property name="filters" value="${filters}" />


		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

		<property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 180秒，也就是3分钟 -->
		<property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->

		<!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnReturn" value="${testOnReturn}" />
	</bean><!-- -->




	<bean  id="mysqlConfig" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xbalao.mapper" />
		<property name="markerInterface" value="com.cf88.mapper.SqlMapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"></property>
	</bean>
	
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>



	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="typeAliasesPackage" value="com.xbalao.model"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations" >
			<list>
				<value>classpath*:com/xbalao/mapper/*Mapper.xml</value>
				<value>classpath*:com/cf88/mapper/sqlMapper.xml</value>
			</list>
		</property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>

	</bean>
	

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="del*" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="accept*" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />

			<tx:method name="get*"  />
			<tx:method name="query*"  />
			<tx:method name="load*" />
			<tx:method name="read*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="servicesPointcut" expression="execution(* com.cf88.service..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicesPointcut" />
	</aop:config>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

</beans> 